*&---------------------------------------------------------------------*
*& Report ZTEST_EXCELUPLOAD
*&---------------------------------------------------------------------*
*& CHRISTIAN SALCEDO
*& SAP BUSINESS ANALYST I INTERN - SUMMER 19
*&
*& DEV NOTE: DATABASE TABLE ZTEST_EXCELTAB HAS SINCE BEEN UPDATE AND DOES NOT MATCH TYPE/DATA STRUCTURES
*&---------------------------------------------------------------------*
REPORT ZTEST_EXCELUPLOAD.

TABLES: ZTEST_EXCELTAB.

DATA: IT_FILE LIKE ALSMEX_TABLINE OCCURS 0 WITH HEADER LINE,
      LS_FILE LIKE LINE OF IT_FILE.


DATA FILE_PATH LIKE RLGRAP-FILENAME.

TYPES: BEGIN OF ZTEST_EXCELTAB,
  MANDT TYPE MANDT,
  FIRST_N TYPE C LENGTH 50,
  LAST_N  TYPE C LENGTH 50,
  DEPT  TYPE C LENGTH 50,
       END OF ZTEST_EXCELTAB.

DATA: ZTAB_UPLOAD TYPE STANDARD TABLE OF ZTEST_EXCELTAB WITH HEADER LINE,
      IT_UPLOAD LIKE LINE OF ZTAB_UPLOAD,
      WA_UPLOAD LIKE LINE OF ZTAB_UPLOAD.


*DATA: EXCEL_TAB TYPE TABLE OF ZTEST_EXCELTAB WITH HEADER LINE.

CALL FUNCTION 'F4_FILENAME'
  EXPORTING
    FIELD_NAME = 'DESKTOP/UPLOADTEST.XLS' "HERE FILE_PATH IS THE TEXT ELEMENT NAME ON SCREEN.
  IMPORTING
    FILE_NAME  = FILE_PATH.

"IN FILE_PATH YOU GET THE EXCEL FILE PATH , WHICH YOU WANT TO UPLOAD IN INTERNAL TABLE
"EX: E:\PREM\PREMRAL_DETAILS.XLS' AND WE PASS THIS FILE NAME TO THE FOLLOWING FUNCTION MODULE
"WHICH RETURN BACK THE INTERNAL TABLE OF ITS OWN FORMAT ."
CALL FUNCTION 'ALSM_EXCEL_TO_INTERNAL_TABLE'
  EXPORTING
    FILENAME                = FILE_PATH
    I_BEGIN_COL             = '1' "beginning column target where excel data is grabbed
    I_BEGIN_ROW             = '2' "beginning row target where excel data is grabbed
    I_END_COL               = '3' "ending col target where excel data grab ends
    I_END_ROW               = '200' "ending row target where excel data grab ends
  TABLES
    INTERN                  = IT_FILE
  EXCEPTIONS
    INCONSISTENT_PARAMETERS = 1
    UPLOAD_OLE              = 2
    OTHERS                  = 3.
IF SY-SUBRC NE SPACE.
*LEAVE PROGRAM.
ENDIF.
" NOW I USE THE FOLLOWING LOGIC TO CONVERT THAT IT_FILE TABLE  INTO OUR OWN TABLE FORMAT."
SORT IT_FILE BY ROW. " USED TO RECOGNIZE THE 'AT END OF' TO LOOP THROUGH EACH ROW FOR ALL THREE PEICES OF DATA.

CLEAR LS_FILE.
CLEAR IT_UPLOAD.

LOOP AT IT_FILE INTO LS_FILE.
  CASE LS_FILE-COL.
    WHEN '1'. "when on row 1, grab all data as SAP TAB row
      MOVE LS_FILE-VALUE TO IT_UPLOAD-FIRST_N.
    WHEN '2'. "when on row 2, grab all data as SAP TAB row
      MOVE LS_FILE-VALUE TO IT_UPLOAD-LAST_N.
    WHEN '3'. "when on row 3, grab all data as SAP TAB row
      MOVE LS_FILE-VALUE TO IT_UPLOAD-DEPT.
  ENDCASE.
  AT END OF ROW.
    "AT END OF ROW IT_UPLOAD IS UPDATED WITH THE DESIRED VALUE I.E
    " WHEN ROW COLUMN IN TABLE ONE CONVERTED  FROM 1 TO 2 , THE FIRST_N COLUMN IN TABLE 2 IS INSERTED. WHICH IS THE REQUIRED FORMAT OF US . "
    APPEND IT_UPLOAD TO ZTAB_UPLOAD.
    " CLEARS LINE STRUCTURES FOR NEXT LOOP ITERATION, IN CASE IT DOESNT OVERWRITE.

*    INSERT LS_FILE INTO ZTAB_UPLOAD.
*    COMMIT WORK.
    CLEAR LS_FILE.
    CLEAR IT_UPLOAD.
    " CLEAR IT_UPLOAD.
  ENDAT.
ENDLOOP.

LOOP AT ZTAB_UPLOAD INTO WA_UPLOAD.
    "INSERT ZTEST_EXCELTAB FROM WA_UPLOAD.
    MOVE WA_UPLOAD TO ZTEST_EXCELTAB.
    IF SY-SUBRC = 0.
      WRITE:/'RECORDS SAVED TO ZTEST DATABASE TABLE'.
    ENDIF.
    " READ TABLE ZTAB_UPLOAD INTO WA_UPLOAD. " INDEX SY-TABIX.
    " second insertion attempt of ZTAB_UPLOAD into ZTEST_EXCELTAB
     "INSERT ZTEST_EXCELTAB FROM TABLE ZTAB_UPLOAD ACCEPTING DUPLICATE KEYS.
*   CHECK DATA SUBMISSION

*    IF IT_UPLOAD = SY-TABIX.
*    WRITE:/'RECORD#'(001), IT_UPLOAD,'WAS NOT CREATED-'(015),WA_UPLOAD.
*    " IT_UPLOAD = 'Patel'.
*  ENDIF.
ENDLOOP.

ULINE.

IF IT_UPLOAD = 'Patel'.
  WRITE:/'PROCESS COMPLETED WITH SOME ERRORS'(003).
ELSE.
  WRITE:/'PROCESS SUCCESSFUL'(004).
ENDIF.

* YOU NEED A 'SORT' STATEMENT TO READ TABLES WITH 'READ' STATEMENTS IN THE FUTURE, MAINLY BC OF 'BINARY SEARCH'


" update program with:
" validation of local table values from excel doc
" pass through good values, negate bad ones
" create backlog of errors (create additional field to store errors)
" test incorrect excel docs